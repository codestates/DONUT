require('dotenv').config();
const { freetalk } = require('../../models');
const { isAuthorized } = require('../tokenfunction');

module.exports = {
  allFreetalk: async (req, res) => {
    // 클라이언트에서 get 요청 => 비회원도 이용할 수 있기 때문에 토큰 확인은 필요없음(단순 열람)
    // findAll
    const wholeFreetalk = await freetalk.findAll();
    res.status(200).json({data: wholeFreetalk, message: 'whole freetalk list!'})
  },
  detailFreetalk: async (req, res) => {
    const partFreetalk = await freetalk.findOne({where: {freetailId: req.body.id, title: req.body.title}});

    if(!partFreetalk) {
      res.status(404).json({data: null, message: 'not found!'});
    } else {
      // 임시
      const freetalkInfo = {title: partFreetalk.title, article: partFreetalk.article};
      
      res.status(200).json({data: freetalkInfo, message: 'found success!'});
    }
  },
  checkCookie: (req, res) => { // 프리톡 작성하기 클릭시 로그인 여부 확인하고 진행
    const authorization = isAuthorized(req);

    if(!authorization) {
      res.status(401).json({data: null, message: 'not authorized!'});
    } else {
      res.status(200).json({data: null, message: 'write freetalk!'});
    }
  },
  addNewFreetalk: (res, req) => {
    // 프리톡은 사진 없이 글만 쓰는곳
    // title, article, hashtag
    const authorization = isAuthorized(req);
    const {title, article, hashtag} = req.body;
    
    if(!authorization) {
      res.status(401).send({message: 'Invalid token!'});
    } else if(!title || !article) {
      res.status(422).send({message: 'Required items not included!'});
    } else {
      // ! 유저아이디 어떻게 채울지 확인요망 !
      freetalk.create({title, article, hashtag}); 

      res.status(201).send({message: 'Freetalk created!'});
    }
  },
  freetalkModify: (res, req) => {
    const authorization = isAuthorized(req);

    if(!authorization) {
      res.status(401).send({message: 'Invalid token!'});
    }
  },
  deleteFreetalk: (res, req) => {
    const authorization = isAuthorized(req);

    if(!authorization) {
      res.status(401).send({message: 'Invalid token!'});
    }
  }
};